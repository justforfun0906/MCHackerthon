// Main App Component
const MiniJobApp = {
    template: `
        <div class="app">
            <!-- ÁãÄÊÖãÊ¨Ñ -->
            <status-bar :current-time="currentTime"></status-bar>
            
            <!-- ‰∏ªË¶ÅÂÖßÂÆπ -->
            <div class="main-content">
                <!-- Áî®Êà∂Ë≥áË®äÂç° -->
                <user-card :user="user"></user-card>

                <!-- ÊêúÂ∞ãËÅ∑Áº∫ -->
                <template v-if="currentTab === 'search'">
                    <filter-bar 
                        :region="filters.region"
                        :skill="filters.skill"
                        :regions="regions"
                        :skills="skills"
                        @update:region="filters.region = $event"
                        @update:skill="filters.skill = $event"
                    ></filter-bar>
                    <job-section 
                        :jobs="filteredJobs" 
                        @select-job="viewJob"
                    ></job-section>
                </template>

                <!-- Áôº‰ΩàËÅ∑Áº∫ -->
                <template v-else-if="currentTab === 'post'">
                    <post-form 
                        :regions="regions"
                        :roles="roles"
                        :store-types="storeTypes"
                        :time-slots="timeSlots"
                        @submit="addJob"
                    ></post-form>
                </template>

                <!-- ÂÄã‰∫∫ -->
                <template v-else>
                    <div class="job-section">
                        <div class="section-title">üë§ ÂÄã‰∫∫Ë≥áË®ä</div>
                        <div class="job-item">Â∑≤Áôº‰ΩàËÅ∑Áº∫Ôºö{{ jobs.length }} Ââá</div>
                    </div>
                </template>
            </div>
            
            <!-- Â∫ïÈÉ®Â∞éËà™ -->
            <bottom-nav 
                :current-tab="currentTab"
                @switch-tab="switchTab"
            ></bottom-nav>
            
            <!-- ÂΩàÁ™ó -->
            <modal
                :show="showModal"
                :title="modalTitle"
                :message="modalMessage"
                @close="closeModal"
                @confirm="confirmAction"
            ></modal>
        </div>
    `,
    components: {
        StatusBar,
        UserCard,
        JobSection,
        BottomNav,
        Modal,
        FilterBar,
        PostForm
    },
    setup() {
        const { ref, reactive, computed, onMounted, onUnmounted, watch } = Vue;
        
        // ÈüøÊáâÂºèÁãÄÊÖã
        const currentTab = ref('search');
        const selectedJob = ref(null);
        const showModal = ref(false);
        const modalTitle = ref('');
        const modalMessage = ref('');
        const currentTime = ref('00:00');

        // Â≠óÂÖ∏
        const regions = ['Âè∞Âåó', 'Êñ∞Âåó', 'Ê°ÉÂúí', 'Âè∞‰∏≠', 'Âè∞Âçó', 'È´òÈõÑ'];
        const roles = ['Ê´ÉÂè∞', 'Â§ñÂ†¥', 'ÂÖßÂ†¥', 'Á≤óÂ∑•', 'Ê∏ÖÊΩî'];
        const storeTypes = ['È§êÈ£≤', 'Èõ∂ÂîÆ', 'ÊúçÂãô', 'Â∑•Âú∞'];
        const timeSlots = ['Êó©Áè≠', '‰∏≠Áè≠', 'ÊôöÁè≠', 'ÂΩàÊÄß'];
        const skills = roles; // Á∞°ÂåñÔºöÊäÄËÉΩ=ËÅ∑Âãô

        const user = reactive({
            name: 'Êñ∞ÊâãÂ∞èÈõû',
            level: 1,
            coins: 50,
            exp: 25
        });
        
    // ËÅ∑Áº∫Ë≥áÊñôÔºàFirestoreÔºâ
    const jobs = ref([]);

        const filters = reactive({ region: '', skill: '' });

        const filteredJobs = computed(() => {
            return jobs.value.filter(j => {
                const regionOk = !filters.region || j.region === filters.region;
                const skillOk = !filters.skill || j.roles.includes(filters.skill);
                return regionOk && skillOk;
            });
        });

        // Firestore Ë®ÇÈñ±
        let unsubscribe = null;
        const startSubscribe = () => {
            if (!window.db) {
                modalTitle.value = 'ÈÄ£Á∑öÂ§±Êïó';
                modalMessage.value = 'Firebase Â∞öÊú™ÂàùÂßãÂåñÊàñËÖ≥Êú¨Êú™ËºâÂÖ•ÔºåË´ãÊ™¢Êü•Ë®≠ÂÆöËàáÁ∂≤Ë∑Ø„ÄÇ';
                showModal.value = true;
                return;
            }
            const col = window.db.collection('jobs');
            unsubscribe = col.orderBy('createdAt', 'desc').onSnapshot((snap) => {
                const arr = [];
                snap.forEach(doc => {
                    const d = doc.data();
                    arr.push({ id: doc.id, ...d });
                });
                jobs.value = arr;
            }, (err) => {
                console.error('[Firestore] onSnapshot error', err);
            });
        };

        // Âãï‰Ωú
        const viewJob = (job) => {
            selectedJob.value = job;
            modalTitle.value = `${job.region}ÔΩú${job.storeType}`;
            modalMessage.value = `ÈúÄÊ±ÇÔºö${job.roles.join('„ÄÅ')}\nÊôÇÊÆµÔºö${job.time}\n‰∫∫Êï∏Ôºö${job.count}`;
            showModal.value = true;
        };

        const addJob = async (payload) => {
            try {
                if (!window.db) throw new Error('Firebase Â∞öÊú™ÂàùÂßãÂåñ');
                const docData = { ...payload, createdAt: Date.now() };
                await window.db.collection('jobs').add(docData);
                modalTitle.value = 'Áôº‰ΩàÊàêÂäü';
                modalMessage.value = 'ÊÇ®ÁöÑËÅ∑Áº∫Â∑≤‰∏äÊû∂';
                showModal.value = true;
                currentTab.value = 'search';
            } catch (e) {
                console.error(e);
                modalTitle.value = 'Áôº‰ΩàÂ§±Êïó';
                modalMessage.value = 'Ë´ãÊ™¢Êü•Á∂≤Ë∑ØÊàñ Firebase Ë®≠ÂÆö';
                showModal.value = true;
            }
        };

        // ÊôÇÈñìÊõ¥Êñ∞
        let timeInterval = null;
        const updateTime = () => {
            const now = new Date();
            const timeString = now.getHours().toString().padStart(2, '0') + ':' + 
                           now.getMinutes().toString().padStart(2, '0');
            currentTime.value = timeString;
        };

        // ÂàáÊèõÊ®ôÁ±§
        const switchTab = (tab) => {
            currentTab.value = tab;
        };

        // ÁîüÂëΩÈÄ±Êúü
        onMounted(() => {
            updateTime();
            timeInterval = setInterval(updateTime, 1000);
            startSubscribe();
        });
        onUnmounted(() => {
            if (timeInterval) clearInterval(timeInterval);
            if (typeof unsubscribe === 'function') unsubscribe();
        });

        // Â∞éÂá∫
        return {
            currentTab,
            selectedJob,
            showModal,
            modalTitle,
            modalMessage,
            currentTime,
            user,
            jobs: jobs,
            regions,
            roles,
            storeTypes,
            timeSlots,
            skills,
            filters,
            filteredJobs,
            viewJob,
            addJob,
            closeModal: () => { showModal.value = false; },
            confirmAction: () => { showModal.value = false; },
            switchTab
        };
    }
};